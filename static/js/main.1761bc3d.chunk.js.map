{"version":3,"sources":["Components/demo_80.js","Components/SearchBox_80.js","Components/Card_80.js","Components/CardList_80.js","containers/App_80.js","serviceWorker.js","index.js"],"names":["demo","id","name","img","SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Card","src","process","alt","CardList","map","user","i","App","onSearchChange","event","setState","target","value","state","filteredDemos","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2OAAaA,EAAO,CAClB,CACEC,GAAI,EACJC,KAAM,QACNC,IAAK,cAEP,CACEF,GAAI,EACJC,KAAM,QACNC,IAAI,cAEN,CACEF,GAAI,EACJC,KAAM,QACNC,IAAI,cAEN,CACEF,GAAI,EACJC,KAAM,QACNC,IAAI,cAEN,CACEF,GAAI,EACJC,KAAM,QACNC,IAAK,cAEP,CACEF,GAAI,EACJC,KAAM,QACNC,IAAK,cAEP,CACEF,GAAI,EACJC,KAAM,QACNC,IAAI,cAEN,CACEF,GAAI,EACJC,KAAM,QACNC,IAAK,cAEP,CACEF,GAAI,EACJC,KAAM,QACNC,IAAK,cAEP,CACEF,GAAI,GACJC,KAAM,SACNC,IAAK,gBClCMC,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,qBAAKC,UAAU,MAAf,SACE,uBACEA,UAAU,yBACVC,KAAK,SACLC,YAAY,eACZC,SAAUJ,OCGHK,G,MATF,SAAC,GAAmB,IAAjBT,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,IACpB,OACE,sBAAKI,UAAU,kDAAf,UACE,6BAAKL,IACL,qBAAKU,IAAKC,oBAAyBV,EAAKW,IAAI,UCMnCC,EAVE,SAAC,GAAc,IAAZf,EAAW,EAAXA,KAClB,OACE,8BACGA,EAAKgB,KAAI,SAACC,EAAMC,GACf,OAAO,cAAC,EAAD,CAAcjB,GAAIgB,EAAKhB,GAAIC,KAAMe,EAAKf,KAAMC,IAAKc,EAAKd,KAA3Ce,SC6BXC,E,kDA7Bb,aAAe,IAAD,8BACZ,gBAOFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEjB,YAAagB,EAAME,OAAOC,SAP1C,EAAKC,MAAQ,CACXzB,KAAMA,EACNK,YAAa,IAJH,E,qDAYJ,IAAD,OACDqB,EAAgBC,KAAKF,MAAMzB,KAAK4B,QAAO,SAAC5B,GAC5C,OAAOA,EAAKE,KACT2B,cACAC,SAAS,EAAKL,MAAMpB,YAAYwB,kBAGrC,OACE,sBAAKtB,UAAU,KAAf,UACE,2CACA,cAAC,EAAD,CAAWD,aAAcqB,KAAKP,iBAC9B,cAAC,EAAD,CAAUpB,KAAM0B,IAHlB,W,GArBYK,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,8BACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1761bc3d.chunk.js","sourcesContent":["export const demo = [\r\n  {\r\n    id: 1,\r\n    name: \"Demo1\",\r\n    img: '/img/1.PNG',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Demo2\",\r\n    img:'/img/2.PNG',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Demo3\",\r\n    img:'/img/3.PNG',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Demo4\",\r\n    img:'/img/4.PNG',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Demo5\",\r\n    img: '/img/5.PNG',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: \"Demo6\",\r\n    img: '/img/6.PNG',\r\n  },\r\n  {\r\n    id: 7,\r\n    name: \"Demo7\",\r\n    img:'/img/7.PNG',\r\n  },\r\n  {\r\n    id: 8,\r\n    name: \"Demo8\",\r\n    img: '/img/8.PNG',\r\n  },\r\n  {\r\n    id: 9,\r\n    name: \"Demo9\",\r\n    img: '/img/9.PNG',\r\n  },\r\n  {\r\n    id: 10,\r\n    name: \"Demo10\",\r\n    img: '/img/10.PNG',\r\n  },\r\n];\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className=\"pa3\">\r\n      <input\r\n        className=\"pa3 ba b--red bg-white\"\r\n        type=\"search\"\r\n        placeholder=\"search demos\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\nimport './Card_80.css'\r\n\r\nconst Card = ({ name, img }) => {\r\n  return (\r\n    <div className=\"bg-light-blue dib br3 pa4 ma3 grow bw2 shadow-5\">\r\n      <h2>{name}</h2>\r\n      <img src={process.env.PUBLIC_URL + img} alt='' />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card_80\";\r\n\r\nconst CardList = ({ demo }) => {\r\n  return (\r\n    <div>\r\n      {demo.map((user, i) => {\r\n        return <Card key={i} id={user.id} name={user.name} img={user.img} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React, { Component } from \"react\";\r\nimport { demo } from \"../Components/demo_80\";\r\nimport SearchBox from \"../Components/SearchBox_80\";\r\nimport CardList from \"../Components/CardList_80\";\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      demo: demo,\r\n      searchfield: \"\",\r\n    };\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const filteredDemos = this.state.demo.filter((demo) => {\r\n      return demo.name\r\n        .toLowerCase()\r\n        .includes(this.state.searchfield.toLowerCase());\r\n    });\r\n\r\n    return (\r\n      <div className=\"tc\">\r\n        <h1>ClassDemo</h1>\r\n        <SearchBox searchChange={this.onSearchChange} />\r\n        <CardList demo={filteredDemos} />;\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index_80.css\";\nimport App from \"./containers/App_80.js\";\n//import CardList from \"./CardList\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n//import { demo } from \"./demo\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}